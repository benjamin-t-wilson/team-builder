{"version":3,"sources":["components/MemberList.js","components/TeamMember.js","components/MemberForm.js","App.js","serviceWorker.js","index.js"],"names":["MemberList","id","name","occupation","bio","TeamMember","props","className","members","map","cv","key","onClick","editMember","MemberForm","emptyObj","useState","member","setMember","changeHandler","event","target","value","didMount","setDidMount","useEffect","memberToEdit","onSubmit","preventDefault","isEditing","newMember","Date","now","addNewMember","returnEditMember","htmlFor","type","placeholder","onChange","App","team","setTeam","setMemberToEdit","setIsEditing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQASeA,G,MATI,CACjB,CACEC,GAAI,EACJC,KAAM,eACNC,WAAY,2BACZC,IAAI,kaCcOC,MAjBf,SAAoBC,GAChB,OACI,yBAAKC,UAAU,QACVD,EAAME,QAAQC,IAAI,SAAAC,GACf,OACI,yBAAKH,UAAU,aAAaI,IAAKD,EAAGT,IAChC,4BAAKS,EAAGR,MACR,4BAAKQ,EAAGP,YACR,2BAAIO,EAAGN,KACP,4BAAQQ,QAAS,WAAON,EAAMO,WAAWH,KAAzC,a,0jBCmETI,MA5Ef,SAAoBR,GAClB,IAAMS,EAAW,CACfb,KAAM,GACNC,WAAY,GACZC,IAAK,IAJkB,EAMGY,mBAASD,GANZ,mBAMlBE,EANkB,KAMVC,EANU,KAQnBC,EAAgB,SAAAC,GACpBF,EAAU,EAAD,GAAMD,EAAN,eAAeG,EAAMC,OAAOnB,KAAOkB,EAAMC,OAAOC,UATlC,EAkCON,oBAAS,GAlChB,mBAkClBO,EAlCkB,KAkCRC,EAlCQ,KA6CzB,OAVAC,oBAAU,WACRD,GAAY,IACX,IAEHC,oBAAU,WACJF,GACFL,EAAUZ,EAAMoB,eAEjB,CAACpB,EAAMoB,eAGR,0BAAMC,SAlCW,SAAAP,GAEjB,GADAA,EAAMQ,iBACiB,GAAnBtB,EAAMuB,UAAoB,CAC5B,IAAMC,EAAS,KACVb,EADU,CAEbhB,GAAI8B,KAAKC,QAEX1B,EAAM2B,aAAaH,GACnBZ,EAAUH,QAEVT,EAAME,QAAQC,IAAI,SAAAC,GACZA,EAAGT,KAAOgB,EAAOhB,KACnBS,EAAGR,KAAOe,EAAOf,KACjBQ,EAAGP,WAAac,EAAOd,WACvBO,EAAGN,IAAMa,EAAOb,IAChBE,EAAM4B,iBAAiBjB,GACvBC,EAAUH,QAmBd,2BAAOoB,QAAQ,QAAf,qBACA,2BACEC,KAAK,OACLlC,KAAK,OACLmC,YAAY,cACZf,MAAOL,EAAOf,KACdoC,SAAUnB,IAEZ,2BAAOgB,QAAQ,cAAf,0BACA,2BACEC,KAAK,OACLlC,KAAK,aACLmC,YAAY,qBACZf,MAAOL,EAAOd,WACdmC,SAAUnB,IAEZ,2BAAOgB,QAAQ,OAAf,mBACA,8BACEC,KAAK,OACLlC,KAAK,MACLmC,YAAW,scACXf,MAAOL,EAAOb,IACdkC,SAAUnB,IAEZ,4BAAQiB,KAAK,UAAb,YC9BSG,MApCf,WAAgB,IAAD,EACWvB,mBAAShB,GADpB,mBACNwC,EADM,KACAC,EADA,OAY2BzB,qBAZ3B,mBAYNU,EAZM,KAYQgB,EAZR,OAaqB1B,oBAAS,GAb9B,mBAaNa,EAbM,KAaKc,EAbL,KAoBb,OACE,yBAAKpC,UAAU,OACb,gEACA,0CACA,kBAAC,EAAD,CACE0B,aAtBe,SAAAhB,GACnBwB,EAAQ,GAAD,mBAAKD,GAAL,CAAWvB,MAsBdS,aAAcA,EACdG,UAAWA,EACXrB,QAASgC,EACTN,iBAtBmB,SAAAjB,GACvBwB,EAAQ,YAAID,IACZG,GAAa,MAsBX,kBAAC,EAAD,CAAYnC,QAASgC,EAAM3B,WAhBZ,SAAAI,GACjByB,EAAgBzB,GAChB0B,GAAa,QCZGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.65acefd6.chunk.js","sourcesContent":["const MemberList = [\r\n  {\r\n    id: 1,\r\n    name: \"Tonald Drump\",\r\n    occupation: \"Leader of the Free World\",\r\n    bio: `I was going to say something extremely rough to Lorem Ipsum, to its family, and I said to myself, \"I can't do it. I just can't do it. It's inappropriate. It's not nice.\" Lorem Ipsum better hope that there are no \"tapes\" of our conversations before he starts leaking to the press! Lorem Ipsum's father was with Lee Harvey Oswald prior to Oswald's being, you know, shot. This placeholder text is gonna be HUGE.`\r\n  }\r\n];\r\n\r\nexport default MemberList;\r\n","import React from \"react\"\r\n\r\nfunction TeamMember(props) {\r\n    return (\r\n        <div className=\"team\">\r\n            {props.members.map(cv => {\r\n                return (\r\n                    <div className=\"teamMember\" key={cv.id}>\r\n                        <h1>{cv.name}</h1>\r\n                        <h2>{cv.occupation}</h2>\r\n                        <p>{cv.bio}</p>\r\n                        <button onClick={() => {props.editMember(cv)}}>Edit</button>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TeamMember","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction MemberForm(props) {\r\n  const emptyObj = {\r\n    name: \"\",\r\n    occupation: \"\",\r\n    bio: \"\"\r\n  };\r\n  const [member, setMember] = useState(emptyObj);\r\n\r\n  const changeHandler = event => {\r\n    setMember({ ...member, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const submitForm = event => {\r\n    event.preventDefault();\r\n    if (props.isEditing == false) {\r\n      const newMember = {\r\n        ...member,\r\n        id: Date.now()\r\n      };\r\n      props.addNewMember(newMember);\r\n      setMember(emptyObj);\r\n    } else {\r\n      props.members.map(cv => {\r\n        if (cv.id === member.id) {\r\n          cv.name = member.name;\r\n          cv.occupation = member.occupation;\r\n          cv.bio = member.bio;\r\n          props.returnEditMember(member);\r\n          setMember(emptyObj);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const [didMount, setDidMount] = useState(false);\r\n  useEffect(() => {\r\n    setDidMount(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (didMount) {\r\n      setMember(props.memberToEdit);\r\n    }\r\n  }, [props.memberToEdit]);\r\n\r\n  return (\r\n    <form onSubmit={submitForm}>\r\n      <label htmlFor=\"name\">Team Member Name:</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        placeholder=\"Phillip Fry\"\r\n        value={member.name}\r\n        onChange={changeHandler}\r\n      />\r\n      <label htmlFor=\"occupation\">Team Member Occupation</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"occupation\"\r\n        placeholder=\"Pizza Delivery Boy\"\r\n        value={member.occupation}\r\n        onChange={changeHandler}\r\n      />\r\n      <label htmlFor=\"bio\">Team Member Bio</label>\r\n      <textarea\r\n        type=\"text\"\r\n        name=\"bio\"\r\n        placeholder={`Uh, is the puppy mechanical in any way? Who are those horrible orange men? Bender! Ship! Stop bickering or I'm going to come back there and change your opinions manually! One hundred dollars. I'll get my kit! Who am I making this out to? I don't know what you did, Fry, but once again, you screwed up! Now all the planets are gonna start cracking wise about our mamas. And then the battle's not so bad? Aww, it's true. I've been hiding it for so long.`}\r\n        value={member.bio}\r\n        onChange={changeHandler}\r\n      />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default MemberForm;\r\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\n\nimport MemberList from \"./components/MemberList.js\";\nimport TeamMember from \"./components/TeamMember.js\";\nimport MemberForm from \"./components/MemberForm.js\";\n\nfunction App() {\n  const [team, setTeam] = useState(MemberList);\n\n  const addNewMember = member => {\n    setTeam([...team, member]);\n  };\n\n  const returnEditMember = member => {\n    setTeam([...team]);\n    setIsEditing(false);\n  };\n\n  const [memberToEdit, setMemberToEdit] = useState();\n  const [isEditing, setIsEditing] = useState(false);\n\n  const editMember = member => {\n    setMemberToEdit(member);\n    setIsEditing(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>The League of Ordinary Gentlemen</h1>\n      <h2>and women*</h2>\n      <MemberForm\n        addNewMember={addNewMember}\n        memberToEdit={memberToEdit}\n        isEditing={isEditing}\n        members={team}\n        returnEditMember={returnEditMember}\n      />\n      <TeamMember members={team} editMember={editMember} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}